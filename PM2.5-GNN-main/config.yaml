# -*- coding: utf-8 -*-
---
experiments:
  metero_use: ['2m_temperature',
               'boundary_layer_height',  # Comment out for no_BPL experiments.
               'k_index',
               'relative_humidity+950',
               'surface_pressure',
               'total_precipitation',
               'u_component_of_wind+950',
               'v_component_of_wind+950',]
  save_npy: True
  dataset_num: 3
  model: HA
  model: MLP
#  model: MTGNN
#  model: GAGNN
#  model: iTransformer
#  model: Airformer
  # model: PM25_GNN_MLP
  # model: PM25_GNN_SCNN
  # model: PM25_GNN_Direct


train:
  # 倍数关系，hist_len 是cycle_len的倍数
  # 并且这个pred_len 是cycle_len的倍数
  # 由于存在这个卷积核，所以hist_len必须大于卷积核的尺寸
  batch_size: 32
  epochs: 50
  exp_repeat: 10
  early_stop: 10
  hist_len: 8  # 对于方案3（短期预测）可以考虑缩短到8-10
  # 如果是方案2（季节性预测），可以考虑增加到24来捕捉日周期
  pred_len: 8
  lr: 0.001
  weight_decay: 0.00001
  cycle_len: 8 # 周期长度
  short_period_len: 8 # 短期依赖长度，一天的数据点数

filepath:
  GPU-Server:
    knowair_fp: C:\Users\W\Desktop\GAT\pm2.5project_newest\PM2.5-GNN-main\data\KnowAir.npy
    results_dir: C:\Users\W\Desktop\GAT\pm2.5project_newest\PM2.5-GNN-main\data\results
  LAPTOP-65JOQ66R:
    knowair_fp: C:\Users\W\Desktop\SCNN\PM2.5-GNN-main\data\KnowAir.npy
    results_dir: C:\Users\W\Desktop\SCNN\PM2.5-GNN-main\data\results
  GWJ:
    knowair_fp: D:\timeDependent\pm2.5project_newest\PM2.5-GNN-main\data\KnowAir.npy
    results_dir: D:\timeDependent\pm2.5project_newest\PM2.5-GNN-main\data\results
  DESKTOP-ITTPL60:
    knowair_fp: E:/jupyter/match/create/data/KnowAir.npy
    results_dir: E:/jupyter/match/create/data/results

data:
  metero_var:
    ['100m_u_component_of_wind',
     '100m_v_component_of_wind',
     '2m_dewpoint_temperature',
     '2m_temperature',
     'boundary_layer_height',
     'k_index',
     'relative_humidity+950',
     'relative_humidity+975',
     'specific_humidity+950',
     'surface_pressure',
     'temperature+925',
     'temperature+950',
     'total_precipitation',
     'u_component_of_wind+950',
     'v_component_of_wind+950',
     'vertical_velocity+950',
     'vorticity+950']

dataset:
  data_start: [[2015, 1, 1, 0, 0], GMT]
  data_end: [[2018, 12, 31, 21, 0], GMT]

  1:
    train_start: [[2015, 1, 1], GMT]
    train_end: [[2016, 12, 31], GMT]
    val_start: [[2017, 1, 1], GMT]
    val_end: [[2017, 12, 31], GMT]
    test_start: [[2018, 1, 1], GMT]
    test_end: [[2018, 12, 31], GMT]

  2:
    train_start: [[2015, 11, 1], GMT]
    train_end: [[2016, 2, 28], GMT]
    val_start: [[2016, 11, 1], GMT]
    val_end: [[2017, 2, 28], GMT]
    test_start: [[2017, 11, 1], GMT]
    test_end: [[2018, 2, 28], GMT]

  3:
    train_start: [[2016, 9, 1], GMT]
    train_end: [[2016, 11, 30], GMT]
    val_start: [[2016, 12, 1], GMT]
    val_end: [[2016, 12, 31], GMT]
    test_start: [[2017, 1, 1], GMT]
    test_end: [[2017, 1, 31], GMT]
